package com.demo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

 class Employee implements Comparable<Employee>{

	int id;
	String name;
	int salary;
	
	
	public Employee(int id, String name, int salary) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
	}


	@Override
	public int compareTo(Employee o) {
		// TODO Auto-generated method stub
		return this.name.compareTo(o.name);
	}


	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + "]";
	}
	
	
	
}




public class Bpp
{
	public static void main(String args[])
	{
//		List<Employee> list=new ArrayList<>();
//		list.add(new Employee(1,"rajiv",2400));
//		list.add(new Employee(2,"vikash",2600));
//		list.add(new Employee(3,"aman",2300));
//		list.add(new Employee(4,"vishal",2000));
		
		List<Employee> list=Stream.of(new Employee(1,"rajiv",2400),new Employee(2,"vikash",2600),new Employee(3,"aman",2300),
				new Employee(4,"vishal",2000)).collect(Collectors.toList());
//		Collections.sort(list);
		//System.out.println(list);
		
//		Comparator<Employee> comp=(obj1,obj2)->
//		{
//			
//				return obj1.name.compareTo(obj2.name);
//			
//		};
		Bpp bp=new Bpp();
		
		
		//list.stream().sorted((obj1,obj2)->obj1.name.compareTo(obj2.name)).forEach(System.out::println);
		list.stream().sorted(bp::sort).forEach(System.out::println);
		int sum=list.stream().map(e->e.salary).reduce(0,(a,b)->a+b);
		System.out.println(sum);
		
	   
		
	}
	
	public int sort(Employee emp1,Employee emp2)
	{
		return emp1.name.compareTo(emp2.name).to;
	}
	
	
}
